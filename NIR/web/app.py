import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score, RocCurveDisplay
import matplotlib.pyplot as plt
import time


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å + –¥–∞–Ω–Ω—ã–µ
@st.cache_data
def load_data_and_model():
    df = pd.read_csv('data/adult.csv')
    df.replace('?', pd.NA, inplace=True)
    df.dropna(inplace=True)
    df['income'] = df['income'].apply(lambda x: 1 if '>50K' in x else 0)

    X_raw = df.drop('income', axis=1)
    y = df['income']

    X_encoded = pd.get_dummies(X_raw, drop_first=True)
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X_encoded)

    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

    model = GradientBoostingClassifier(n_estimators=200, max_depth=5, learning_rate=0.1, random_state=42)
    model.fit(X_train, y_train)

    return model, X_train, X_test, y_train, y_test, X_raw, scaler, X_encoded.columns.tolist()


# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å + –¥–∞–Ω–Ω—ã–µ
model, X_train, X_test, y_train, y_test, X_raw_template, scaler, feature_columns = load_data_and_model()

# Sidebar ‚Äî –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", ["1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏", "2. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"])

# --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ---
if page == "1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏":
    st.title("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ Gradient Boosting + ROC-–∫—Ä–∏–≤–∞—è")

    # –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    n_estimators = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)", min_value=50, max_value=300, step=50, value=100)
    max_depth = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (max_depth)", min_value=1, max_value=10, step=1, value=3)
    learning_rate = st.slider("Learning rate", min_value=0.01, max_value=0.5, step=0.01, value=0.1)

    # –ö–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
        start = time.time()

        model_gb = GradientBoostingClassifier(
            n_estimators=n_estimators,
            max_depth=max_depth,
            learning_rate=learning_rate,
            random_state=42
        )
        model_gb.fit(X_train, y_train)

        duration = time.time() - start

        y_pred = model_gb.predict(X_test)
        y_proba = model_gb.predict_proba(X_test)[:, 1]

        acc = accuracy_score(y_test, y_pred)
        f1 = f1_score(y_test, y_pred)
        roc_auc = roc_auc_score(y_test, y_proba)

        st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")

        st.info(f"üïí –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {duration:.2f} —Å–µ–∫")

        col1, col2, col3 = st.columns(3)
        col1.metric("üéØ Accuracy", f"{acc:.4f}")
        col2.metric("üìå F1-score", f"{f1:.4f}")
        col3.metric("üìà ROC AUC", f"{roc_auc:.4f}")

        st.subheader("üìà ROC-–∫—Ä–∏–≤–∞—è –º–æ–¥–µ–ª–∏")
        fig, ax = plt.subplots()
        RocCurveDisplay.from_estimator(model_gb, X_test, y_test, ax=ax)
        st.pyplot(fig)

# --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ---
elif page == "2. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º":
    st.title("üíº –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ (>50K$) –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")

    # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    age = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 18, 90, 30)
    education = st.selectbox("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", X_raw_template['education'].unique())
    marital_status = st.selectbox("–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", X_raw_template['marital.status'].unique())
    occupation = st.selectbox("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è", X_raw_template['occupation'].unique())
    hours_per_week = st.slider("–ß–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –Ω–µ–¥–µ–ª—é", 1, 99, 40)
    sex = st.selectbox("–ü–æ–ª", X_raw_template['sex'].unique())
    native_country = st.selectbox("–°—Ç—Ä–∞–Ω–∞", X_raw_template['native.country'].unique())

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–æ—Ö–æ–¥"):
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        input_dict = {
            'age': age,
            'education': education,
            'marital.status': marital_status,
            'occupation': occupation,
            'hours.per.week': hours_per_week,
            'sex': sex,
            'native.country': native_country
        }

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        input_df = pd.DataFrame([input_dict])

        # One-hot encoding (–∫–∞–∫ –±—ã–ª–æ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏)
        input_encoded = pd.get_dummies(input_df)
        input_encoded = input_encoded.reindex(columns=feature_columns, fill_value=0)

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        input_scaled = scaler.transform(input_encoded)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        pred = model.predict(input_scaled)[0]
        proba = model.predict_proba(input_scaled)[0][1]

        # –í—ã–≤–æ–¥
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
        if pred == 1:
            st.success(f"‚úÖ –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥ **> 50K$** (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {proba:.2%})")
        else:
            st.error(f"‚ùå –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥ **<= 50K$** (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {1 - proba:.2%})")
